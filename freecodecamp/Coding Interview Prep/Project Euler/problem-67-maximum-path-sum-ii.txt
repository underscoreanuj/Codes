function maximumPathSumII(triangle) {
  // Good luck!
  let n = triangle.length;

  /* 
  creating a deep copy of the input
  to prevent test cases from failing
  */
  
  let tab = []
  for(let i=0; i<n; ++i) {
    let row = [];
    row = [...triangle[i]];
    tab.push(row);
  }

  for(let i=n-2; i>=0; --i) {
    for(let j=0; j<=i; ++j) {
      tab[i][j] += Math.max(
        tab[i+1][j],
        tab[i+1][j+1]
        );
    }
  }

  return tab[0][0];
}

const testTriangle = [[3, 0, 0, 0],
                      [7, 4, 0, 0],
                      [2, 4, 6, 0],
                      [8, 5, 9, 3]];

maximumPathSumII(testTriangle);
